version: "3"

vars:
  BINARY_NAME: sdt
  BINARY_PATH: ./bin/{{.BINARY_NAME}}
  DOCKER_IMAGE: sandrolain/sdt
  VERSION:
    sh: git tag --sort=-version:refname | head -n 1 || echo "v0.0.0"
  COMMIT:
    sh: git rev-parse HEAD
  BUILD_DATE:
    sh: date +"%Y-%m-%dT%H:%M:%S%z"

tasks:
  default:
    desc: Show available tasks
    cmds:
      - task --list

  # Build tasks
  build:
    desc: Build the CLI binary
    sources:
      - "cli/**/*.go"
      - "go.mod"
      - "go.sum"
    generates:
      - "{{.BINARY_PATH}}"
    cmds:
      - go build -ldflags="-s -w -X main.version={{.VERSION}} -X main.commit={{.COMMIT}} -X main.date={{.BUILD_DATE}}" -o {{.BINARY_PATH}} "./cli"

  build-compress:
    desc: Build and compress the binary with UPX
    deps: [build]
    cmds:
      - upx --best --lzma {{.BINARY_PATH}}

  build-all:
    desc: Build all variants (CLI, web, WASM)
    cmds:
      - task: build
      - task: build-web
      - task: wasm-build

  install:
    desc: Install the binary to GOPATH/bin
    deps: [build]
    cmds:
      - cp {{.BINARY_PATH}} $(go env GOPATH)/bin/{{.BINARY_NAME}}

  # Test tasks
  test:
    desc: Run unit tests
    cmds:
      - go test -coverprofile=coverage.out ./cli/...
      - go tool cover -html=coverage.out -o coverage.html
      - echo "Coverage report generated at coverage.html"

  test-race:
    desc: Run tests with race detector
    cmds:
      - go test -race -v ./cli/...

  test-bench:
    desc: Run benchmarks
    cmds:
      - go test -bench=. -benchmem ./cli/...

  test-all:
    desc: Run all tests (unit, race, benchmarks)
    cmds:
      - task: test
      - task: test-race
      - task: test-bench

  # Code quality tasks
  fmt:
    desc: Format Go code with simplification
    cmds:
      - gofmt -s -l -w .

  lint:
    desc: Run golangci-lint
    cmds:
      - golangci-lint run ./cli/...

  vet:
    desc: Run go vet for static analysis
    cmds:
      - go vet ./cli/...

  check:
    desc: Run all checks (fmt, lint, vet, test, security)
    cmds:
      - task: fmt
      - task: lint
      - task: vet
      - task: test
      - task: gosec
      - task: govulncheck

  # Security tasks
  gosec:
    desc: Run security checks with gosec
    cmds:
      - |
        if ! command -v gosec &> /dev/null; then
          echo "Installing gosec..."
          go install github.com/securego/gosec/v2/cmd/gosec@latest
        fi
        gosec -fmt=json -out=security-report.json ./cli/...

  govulncheck:
    desc: Run vulnerability scanner
    cmds:
      - |
        if ! command -v govulncheck &> /dev/null; then
          echo "Installing govulncheck..."
          go install golang.org/x/vuln/cmd/govulncheck@latest
        fi
        govulncheck ./cli/...

  trivy:
    desc: Run Trivy vulnerability scanner
    cmds:
      - |
        if ! command -v trivy &> /dev/null; then
          echo "Trivy is not installed. Installing..."
          brew install aquasecurity/trivy/trivy || echo "Please install Trivy manually"
        fi
        trivy fs --scanners vuln,secret,misconfig .
        trivy fs --format json --output trivy-results.json .

  # Docker tasks
  docker-build:
    desc: Build Docker image
    cmds:
      - task: build-web
      - |
        cd ./docker && \
        docker build -t {{.DOCKER_IMAGE}}:{{.VERSION}} -t {{.DOCKER_IMAGE}}:latest .

  docker-build-multi:
    desc: Build multi-arch Docker image and push
    cmds:
      - task: build-web
      - |
        cd ./docker && \
        docker buildx build \
          --platform linux/amd64,linux/arm64 \
          -t {{.DOCKER_IMAGE}}:{{.VERSION}} \
          -t {{.DOCKER_IMAGE}}:latest \
          --push .

  docker-push:
    desc: Push Docker images to registry
    deps: [docker-build]
    cmds:
      - docker push {{.DOCKER_IMAGE}}:{{.VERSION}}
      - docker push {{.DOCKER_IMAGE}}:latest

  # Release tasks
  release-snapshot:
    desc: Create a snapshot release with GoReleaser
    cmds:
      - goreleaser release --snapshot --clean

  release:
    desc: Create and publish a new release with GoReleaser
    cmds:
      - goreleaser release --clean

  # Version management tasks
  version-major:
    desc: Increment major version (x.0.0)
    cmds:
      - |
        CURRENT=$(git describe --abbrev=0 --tags 2>/dev/null || echo "v0.0.0")
        CURRENT=${CURRENT#v}
        IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT"
        NEW_VERSION="v$((MAJOR+1)).0.0"
        git tag $NEW_VERSION
        git push origin $NEW_VERSION
        echo "Created and pushed tag: $NEW_VERSION"

  version-minor:
    desc: Increment minor version (x.y.0)
    cmds:
      - |
        CURRENT=$(git describe --abbrev=0 --tags 2>/dev/null || echo "v0.0.0")
        CURRENT=${CURRENT#v}
        IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT"
        NEW_VERSION="v$MAJOR.$((MINOR+1)).0"
        git tag $NEW_VERSION
        git push origin $NEW_VERSION
        echo "Created and pushed tag: $NEW_VERSION"

  version-patch:
    desc: Increment patch version (x.y.z)
    cmds:
      - |
        CURRENT=$(git describe --abbrev=0 --tags 2>/dev/null || echo "v0.0.0")
        CURRENT=${CURRENT#v}
        IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT"
        NEW_VERSION="v$MAJOR.$MINOR.$((PATCH+1))"
        git tag $NEW_VERSION
        git push origin $NEW_VERSION
        echo "Created and pushed tag: $NEW_VERSION"

  # Web tasks
  build-web:
    desc: Build web frontend
    dir: web
    cmds:
      - npm install
      - npm run build
      - mkdir -p ../docker/dist
      - cp -R ./dist/* ../docker/dist/

  wasm-build:
    desc: Build WASM version
    cmds:
      - mkdir -p web/src
      - GOOS=js GOARCH=wasm go build -o web/src/sdt.wasm ./cli
      - cp "$(go env GOROOT)/misc/wasm/wasm_exec.js" web/src/

  serve-web:
    desc: Serve web interface locally
    deps: [build-web]
    cmds:
      - cd docker/dist && python3 -m http.server 3000

  # Dependencies tasks
  tidy:
    desc: Tidy and verify go modules
    cmds:
      - go mod tidy
      - go mod verify

  vendor:
    desc: Vendor dependencies
    cmds:
      - go mod vendor

  update-deps:
    desc: Update all dependencies
    cmds:
      - go get -u ./...
      - task: tidy

  # Documentation tasks
  update-docs:
    desc: Generate CLI documentation
    cmds:
      - go run ./cli docs
      - echo "Documentation updated in ./docs/"

  # Clean tasks
  clean:
    desc: Clean build artifacts
    cmds:
      - rm -rf bin/
      - rm -rf dist/
      - rm -rf vendor/
      - rm -rf coverage.out coverage.html
      - rm -rf security-report.json
      - rm -rf trivy-results.json
      - rm -rf docker/dist/

  clean-all:
    desc: Clean all generated files including dependencies
    cmds:
      - task: clean
      - rm -rf web/node_modules/
      - rm -rf web/dist/
